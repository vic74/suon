/******************************************************************************/
/***          Generated by IBExpert 2010.10.29 18.02.2011 9:20:16           ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR ACCCODEPRV_GEN;
CREATE GENERATOR ACCCODESALDO_GEN;
CREATE GENERATOR ADDR_GEN;
CREATE GENERATOR BANK_GEN;
CREATE GENERATOR BUDGETLINE_GEN;
CREATE GENERATOR BUDGETSHABLON_GEN;
CREATE GENERATOR DU_GEN;
CREATE GENERATOR EVENTS_GEN;
CREATE GENERATOR HABIT_TYPE_GEN;
CREATE GENERATOR HOUSE_GEN;
CREATE GENERATOR ISPOLNIT_GEN;
CREATE GENERATOR KATEGORYRIGHTS_GEN;
CREATE GENERATOR KATEGORY_GEN;
CREATE GENERATOR KONTRAGENT_GEN;
CREATE GENERATOR MGROUP_GEN;
CREATE GENERATOR MLIST_GEN;
CREATE GENERATOR OWNERSHIP_GEN;
CREATE GENERATOR PIPLE_GEN;
CREATE GENERATOR PLANHOUSE_GEN;
CREATE GENERATOR PLANREPORT_GEN;
CREATE GENERATOR RIGHTS_GEN;
CREATE GENERATOR ROLES_GEN;
CREATE GENERATOR SHOWHOUSEPLAN_GEN;
CREATE GENERATOR SHOWHOUSE_GEN;
CREATE GENERATOR SHOWRESULT_GEN;
CREATE GENERATOR SHOWSTRUCT_GEN;
CREATE GENERATOR SRVDOG_GEN;
CREATE GENERATOR STREET_GEN;
CREATE GENERATOR STRUCTDEFECT_GEN;
CREATE GENERATOR WORKER_GEN;


/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION BUDGET_EXP 'Бюджет используется. Удалять нельзя.';



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE OR ALTER PROCEDURE CALCHOUSERECVIZITS
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE GETPERIODSALDO (
    D1 DATE,
    D2 DATE,
    ACCODE VARCHAR(32))
RETURNS (
    REC_TYPE SMALLINT,
    DATE_VAL DATE,
    PRV_NAME VARCHAR(32),
    SALDO NUMERIC(18,2),
    ACCCODE VARCHAR(32),
    SRV VARCHAR(32),
    PAY_DATE DATE,
    ACC_DATE DATE,
    HOUSE INTEGER,
    DU INTEGER,
    PSUM NUMERIC(18,2),
    RSUM NUMERIC(18,2),
    OSUM NUMERIC(18,2))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE GETPRVTYPENAME (
    PRV_TYPE SMALLINT)
RETURNS (
    PRV_NAME VARCHAR(32))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE GETRIGHTLIST
RETURNS (
    CODE INTEGER,
    NAME VARCHAR(256))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE GETSALDO (
    D1 DATE,
    ACCCODE VARCHAR(32))
RETURNS (
    SRV VARCHAR(32),
    SUMMA NUMERIC(18,2))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ACCCODE (
    ACCCODE     VARCHAR(32) NOT NULL,
    MASTER      VARCHAR(256),
    ADDR        INTEGER NOT NULL,
    HOUSE       INTEGER NOT NULL,
    STREET      INTEGER NOT NULL,
    DATE_OPEN   DATE,
    DATE_CLOSE  DATE,
    PHONE       VARCHAR(128),
    DU          INTEGER
);


CREATE TABLE ACCCODEPRV (
    CODE      BIGINT NOT NULL,
    REC_TYPE  SMALLINT NOT NULL,
    ACCCODE   VARCHAR(32) NOT NULL,
    SRV       VARCHAR(32) NOT NULL,
    DATE_VAL  DATE NOT NULL,
    PAY_DATE  DATE NOT NULL,
    ACC_DATE  DATE,
    SUMMA     NUMERIC(18,2),
    HOUSE     INTEGER NOT NULL,
    DU        INTEGER
);


CREATE TABLE ACCCODESALDO (
    CODE     BIGINT NOT NULL,
    OP_DATE  DATE NOT NULL,
    ACCCODE  VARCHAR(32) NOT NULL,
    SRV      VARCHAR(32) NOT NULL,
    SALDO    NUMERIC(18,2) NOT NULL
);


CREATE TABLE ADDR (
    CODE        INTEGER NOT NULL,
    FLAT        VARCHAR(32) NOT NULL,
    STREET      INTEGER NOT NULL,
    HOUSE       INTEGER NOT NULL,
    TOTAL_SQ    NUMERIC(15,2) NOT NULL,
    LIVING_SQ   NUMERIC(15,2) NOT NULL,
    LODGER_CNT  SMALLINT NOT NULL,
    OWNERSHIP   VARCHAR(32) NOT NULL,
    HABIT_TYPE  VARCHAR(32) NOT NULL,
    DU          INTEGER NOT NULL
);


CREATE TABLE BANK (
    CODE  INTEGER NOT NULL,
    NAME  VARCHAR(256) NOT NULL,
    BIK   VARCHAR(16) NOT NULL
);


CREATE TABLE BANKSCHET (
    SCHET       VARCHAR(32) NOT NULL,
    KSCHET      VARCHAR(32) NOT NULL,
    KONTRAGENT  INTEGER NOT NULL,
    BANK        INTEGER NOT NULL
);


CREATE TABLE BUDGETLINE (
    CODE    INTEGER NOT NULL,
    BUDGET  INTEGER NOT NULL,
    SRV     VARCHAR(32) NOT NULL,
    TARIF   NUMERIC(15,2) NOT NULL,
    TBASE   SMALLINT NOT NULL,
    PSRV    VARCHAR(32) NOT NULL
);


CREATE TABLE BUDGETSHABLON (
    CODE  INTEGER NOT NULL,
    NAME  VARCHAR(256)
);


CREATE TABLE DU (
    CODE  INTEGER NOT NULL,
    NAME  VARCHAR(128)
);


CREATE TABLE EVENTS (
    CODE         INTEGER NOT NULL,
    CREATEDATE   TIMESTAMP NOT NULL,
    WORKER       INTEGER NOT NULL,
    ETYPE        SMALLINT NOT NULL,
    KATEGORY     INTEGER NOT NULL,
    NOTE         VARCHAR(8192),
    DATA         BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    ADDRUSER     INTEGER,
    EVENTDATE    TIMESTAMP,
    CONTROLDATE  TIMESTAMP,
    ANSWERDATE   TIMESTAMP,
    ANSWER       VARCHAR(8192),
    "ACTIVE"     SMALLINT,
    TAG          SMALLINT
);


CREATE TABLE GLOBALPLANVAR (
    ID       VARCHAR(32) NOT NULL,
    CAPTION  VARCHAR(64) NOT NULL
);


CREATE TABLE HOUSE (
    CODE          INTEGER NOT NULL,
    NOMER         VARCHAR(32) NOT NULL,
    STREET        INTEGER NOT NULL,
    DU            INTEGER,
    TOTAL_SQ      NUMERIC(15,2) DEFAULT 0 NOT NULL,
    LIVING_SQ     NUMERIC(15,2) DEFAULT 0 NOT NULL,
    LODGER_CNT    SMALLINT DEFAULT 0 NOT NULL,
    CELLAR_SQ     NUMERIC(15,2) DEFAULT 0 NOT NULL,
    FLAT_CNT      SMALLINT DEFAULT 0 NOT NULL,
    ACCCODE_CNT   SMALLINT DEFAULT 0 NOT NULL,
    FLOOR_CNT     SMALLINT DEFAULT 0 NOT NULL,
    LIFT_CNT      SMALLINT DEFAULT 0 NOT NULL,
    ENTRANCE_CNT  SMALLINT DEFAULT 0 NOT NULL,
    GARBAGE_CNT   SMALLINT DEFAULT 0 NOT NULL,
    COMMERCE_SQ   NUMERIC(15,2) DEFAULT 0 NOT NULL,
    BUILDYEAR     SMALLINT DEFAULT 0 NOT NULL,
    "ACTIVE"      SMALLINT DEFAULT 0 NOT NULL,
    BUDGET        INTEGER DEFAULT 0 NOT NULL
);


CREATE TABLE ISPOLNIT (
    CODE   INTEGER NOT NULL,
    NAME   VARCHAR(64),
    ITYPE  SMALLINT NOT NULL,
    NOTE   VARCHAR(1024)
);


CREATE TABLE KATEGORY (
    CODE  INTEGER NOT NULL,
    NAME  VARCHAR(256) NOT NULL
);


CREATE TABLE KATEGORYRIGHTS (
    KATEGORY  INTEGER NOT NULL,
    AROLE     INTEGER NOT NULL
);


CREATE TABLE KONTRAGENT (
    CODE      INTEGER NOT NULL,
    NAME      VARCHAR(128) NOT NULL,
    FULLNAME  VARCHAR(256),
    INN       VARCHAR(32),
    KPP       VARCHAR(32),
    OGRN      VARCHAR(32),
    POSTADDR  VARCHAR(256),
    URADDR    VARCHAR(256),
    PHONE     VARCHAR(64),
    EMAIL     VARCHAR(64),
    KTYPE     SMALLINT NOT NULL,
    DEFSCHET  CHAR(32)
);


CREATE TABLE MGROUP (
    CODE  INTEGER NOT NULL,
    NAME  VARCHAR(256) NOT NULL
);


CREATE TABLE MLIST (
    CODE    INTEGER NOT NULL,
    MGROUP  INTEGER NOT NULL,
    NAME    VARCHAR(256) NOT NULL,
    ED      VARCHAR(8),
    RTYPE   SMALLINT
);


CREATE TABLE PIPLE (
    CODE  INTEGER NOT NULL,
    F     VARCHAR(64),
    I     VARCHAR(64),
    O     VARCHAR(64),
    BORN  DATE,
    PS    VARCHAR(16),
    PN    VARCHAR(16),
    PD    VARCHAR(16),
    PV    VARCHAR(256)
);


CREATE TABLE PLANHOUSE (
    CODE      INTEGER NOT NULL,
    PLANDATE  DATE NOT NULL,
    HOUSE     INTEGER NOT NULL,
    PLANDATA  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    SRVLIST   VARCHAR(16340) NOT NULL,
    BUDGET    INTEGER NOT NULL
);


CREATE TABLE PLANREPORT (
    CODE     INTEGER NOT NULL,
    NAME     VARCHAR(64),
    SRV      VARCHAR(32),
    COLUMNS  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    SCRIPT   BLOB SUB_TYPE 1 SEGMENT SIZE 16384
);


CREATE TABLE RIGHTS (
    ARIGHT  INTEGER NOT NULL,
    AROLE   SMALLINT NOT NULL
);


CREATE TABLE ROLES (
    CODE  INTEGER NOT NULL,
    NAME  VARCHAR(256) NOT NULL
);


CREATE TABLE SHOWHOUSE (
    CODE      INTEGER NOT NULL,
    SRVDOG    INTEGER NOT NULL,
    SHOWDATE  DATE NOT NULL,
    STYPE     SMALLINT NOT NULL,
    SYEAR     SMALLINT NOT NULL,
    STATE     SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE SHOWHOUSEPLAN (
    CODE       INTEGER NOT NULL,
    SHOWHOUSE  INTEGER NOT NULL,
    HOUSE      INTEGER NOT NULL,
    D1         DATE NOT NULL,
    D2         DATE NOT NULL,
    SHOWDATE   DATE
);


CREATE TABLE SHOWRESULT (
    CODE          INTEGER NOT NULL,
    SHOWHOUSE     INTEGER NOT NULL,
    HOUSE         INTEGER NOT NULL,
    STRUCTDEFECT  INTEGER NOT NULL,
    NOTE          VARCHAR(256),
    QUANTITY      NUMERIC(18,2),
    ENTRANCE      INTEGER,
    "FLOOR"       INTEGER,
    FLAT          VARCHAR(16),
    ATYPE         SMALLINT DEFAULT 0 NOT NULL,
    RTYPE         SMALLINT DEFAULT 0 NOT NULL,
    MLIST         INTEGER,
    MNOTE         VARCHAR(256),
    V             SMALLINT
);


CREATE TABLE SHOWSTRUCT (
    CODE   INTEGER NOT NULL,
    NAME   VARCHAR(256) NOT NULL,
    STYPE  SMALLINT NOT NULL,
    NUM    SMALLINT NOT NULL
);


CREATE TABLE SRVDOG (
    CODE        INTEGER NOT NULL,
    KONTRAGENT  INTEGER NOT NULL,
    NOMER       VARCHAR(16) NOT NULL,
    D1          DATE NOT NULL,
    D2          DATE NOT NULL,
    "ACTIVE"    SMALLINT DEFAULT 1 NOT NULL,
    DATA        BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE SRVDOGHOUSE (
    SRVDOG  INTEGER NOT NULL,
    HOUSE   INTEGER NOT NULL
);


CREATE TABLE SRVLIST (
    SRV   VARCHAR(32) NOT NULL,
    NAME  VARCHAR(128)
);


CREATE TABLE STREET (
    CODE      INTEGER NOT NULL,
    NAME      VARCHAR(128) NOT NULL,
    STR_TYPE  VARCHAR(64) NOT NULL
);


CREATE TABLE STRUCTDEFECT (
    CODE        INTEGER NOT NULL,
    SHOWSTRUCT  INTEGER NOT NULL,
    NAME        VARCHAR(256) NOT NULL,
    NUM         SMALLINT NOT NULL,
    ED          VARCHAR(8)
);


CREATE TABLE WORKER (
    CODE        INTEGER NOT NULL,
    KONTRAGENT  INTEGER NOT NULL,
    PIPLE       INTEGER,
    USERNAME    VARCHAR(16),
    AROLE       INTEGER NOT NULL
);




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE ACCCODE ADD CONSTRAINT PK_ACCCODE PRIMARY KEY (ACCCODE);
ALTER TABLE ACCCODEPRV ADD CONSTRAINT PK_ACCCODEPRV PRIMARY KEY (CODE);
ALTER TABLE ACCCODESALDO ADD CONSTRAINT PK_ACCCODESALDO PRIMARY KEY (CODE);
ALTER TABLE ADDR ADD CONSTRAINT PK_ADDR PRIMARY KEY (CODE);
ALTER TABLE BANK ADD CONSTRAINT PK_BANK PRIMARY KEY (CODE);
ALTER TABLE BANKSCHET ADD CONSTRAINT PK_BANKSCHET PRIMARY KEY (SCHET);
ALTER TABLE BUDGETLINE ADD CONSTRAINT PK_BUDGETLINE PRIMARY KEY (CODE);
ALTER TABLE BUDGETSHABLON ADD CONSTRAINT PK_BUDGETSHABLON PRIMARY KEY (CODE);
ALTER TABLE DU ADD CONSTRAINT PK_DU PRIMARY KEY (CODE);
ALTER TABLE EVENTS ADD CONSTRAINT PK_EVENTS PRIMARY KEY (CODE);
ALTER TABLE GLOBALPLANVAR ADD CONSTRAINT PK_GLOBALPLANVAR PRIMARY KEY (ID);
ALTER TABLE HOUSE ADD CONSTRAINT PK_HOUSE PRIMARY KEY (CODE);
ALTER TABLE ISPOLNIT ADD CONSTRAINT PK_ISPOLNIT PRIMARY KEY (CODE);
ALTER TABLE KATEGORY ADD CONSTRAINT PK_KATEGORY PRIMARY KEY (CODE);
ALTER TABLE KATEGORYRIGHTS ADD CONSTRAINT PK_KATEGORYRIGHTS PRIMARY KEY (KATEGORY, AROLE);
ALTER TABLE KONTRAGENT ADD CONSTRAINT PK_KONTRAGENT PRIMARY KEY (CODE);
ALTER TABLE MGROUP ADD CONSTRAINT PK_MGROUP PRIMARY KEY (CODE);
ALTER TABLE MLIST ADD CONSTRAINT PK_MLIST PRIMARY KEY (CODE);
ALTER TABLE PIPLE ADD CONSTRAINT PK_PIPLE PRIMARY KEY (CODE);
ALTER TABLE PLANHOUSE ADD CONSTRAINT PK_PLANHOUSE PRIMARY KEY (CODE);
ALTER TABLE PLANREPORT ADD CONSTRAINT PK_PLANREPORT PRIMARY KEY (CODE);
ALTER TABLE RIGHTS ADD CONSTRAINT PK_RIGHTS PRIMARY KEY (ARIGHT, AROLE);
ALTER TABLE ROLES ADD CONSTRAINT PK_ROLES PRIMARY KEY (CODE);
ALTER TABLE SHOWHOUSE ADD CONSTRAINT PK_SHOWHOUSE PRIMARY KEY (CODE);
ALTER TABLE SHOWHOUSEPLAN ADD CONSTRAINT PK_SHOWHOUSEPLAN PRIMARY KEY (CODE);
ALTER TABLE SHOWRESULT ADD CONSTRAINT PK_SHOWRESULT PRIMARY KEY (CODE);
ALTER TABLE SHOWSTRUCT ADD CONSTRAINT PK_SHOWSTRUCT PRIMARY KEY (CODE);
ALTER TABLE SRVDOG ADD CONSTRAINT PK_SRVDOG PRIMARY KEY (CODE);
ALTER TABLE SRVDOGHOUSE ADD CONSTRAINT PK_SRVDOGHOUSE PRIMARY KEY (SRVDOG, HOUSE);
ALTER TABLE SRVLIST ADD CONSTRAINT PK_SRVLIST PRIMARY KEY (SRV);
ALTER TABLE STREET ADD CONSTRAINT PK_STREET PRIMARY KEY (CODE);
ALTER TABLE STRUCTDEFECT ADD CONSTRAINT PK_STRUCTDEFECT PRIMARY KEY (CODE);
ALTER TABLE WORKER ADD CONSTRAINT PK_WORKER PRIMARY KEY (CODE);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX ACCCODE_HOUSE_IDX ON ACCCODE (HOUSE);
CREATE INDEX ACCCODE_IDX1 ON ACCCODE (MASTER);
CREATE INDEX ACCCODEPRV_HOUSE_IDX ON ACCCODEPRV (HOUSE);
CREATE INDEX ACCCODEPRV_IDX1 ON ACCCODEPRV (DATE_VAL);
CREATE INDEX ACCCODEPRV_IDX2 ON ACCCODEPRV (ACC_DATE);
CREATE INDEX ACCCODEPRV_IDX3 ON ACCCODEPRV (ACCCODE);
CREATE INDEX ACCCODESALDO_IDX1 ON ACCCODESALDO (OP_DATE);
CREATE INDEX ACCCODESALDO_IDX2 ON ACCCODESALDO (SALDO);
CREATE INDEX ACCCODESALDO_IDX3 ON ACCCODESALDO (ACCCODE);
CREATE INDEX ADDR_DU_IDX ON ADDR (DU);
CREATE INDEX ADDR_HOUSE_IDX ON ADDR (HOUSE);
CREATE INDEX BUDGETLINE_IDX1 ON BUDGETLINE (BUDGET);
CREATE INDEX EVENTS_IDX1 ON EVENTS (CREATEDATE);
CREATE INDEX HOUSE_DU_IDX ON HOUSE (DU);
CREATE INDEX HOUSE_IDX1 ON HOUSE (NOMER);
CREATE INDEX HOUSE_STREET_IDX ON HOUSE (STREET);
CREATE INDEX PLANHOUSE_PLANDATE ON PLANHOUSE (PLANDATE);
CREATE INDEX STREET_IDX1 ON STREET (NAME);
CREATE INDEX STRUCTDEFECT_IDX1 ON STRUCTDEFECT (SHOWSTRUCT);
CREATE INDEX WORKER_IDX1 ON WORKER (KONTRAGENT);
CREATE INDEX WORKER_IDX2 ON WORKER (USERNAME);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: ACCCODEPRV_BI0 */
CREATE OR ALTER TRIGGER ACCCODEPRV_BI0 FOR ACCCODEPRV
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code is null) then
    NEW.code = Gen_id(AccCodePrv_gen, 1);
end
^


/* Trigger: ACCCODESALDO_BI0 */
CREATE OR ALTER TRIGGER ACCCODESALDO_BI0 FOR ACCCODESALDO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.Code = Gen_id(AccCodeSaldo_gen, 1);
end
^


/* Trigger: ADDR_BI0 */
CREATE OR ALTER TRIGGER ADDR_BI0 FOR ADDR
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.code = gen_id(Addr_gen, 1);
end
^


/* Trigger: BANK_BI0 */
CREATE OR ALTER TRIGGER BANK_BI0 FOR BANK
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code IS NULL) then
    NEW.Code=gen_id(Bank_gen, 1);
end
^


/* Trigger: BUDGETLINE_BI0 */
CREATE OR ALTER TRIGGER BUDGETLINE_BI0 FOR BUDGETLINE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.Code = Gen_id(budgetline_gen, 1);
end
^


/* Trigger: BUDGETSHABLON_BD0 */
CREATE OR ALTER TRIGGER BUDGETSHABLON_BD0 FOR BUDGETSHABLON
ACTIVE BEFORE DELETE POSITION 0
AS
begin
  if (exists(select budget from House where Budget=OLD.Code)) then
    exception Budget_exp;
  delete from BudgetLine where Budget=OLD.Code;
end
^


/* Trigger: BUDGETSHABLON_BI0 */
CREATE OR ALTER TRIGGER BUDGETSHABLON_BI0 FOR BUDGETSHABLON
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code IS NULL) then
    NEW.code = Gen_id(BudgetShablon_gen,1);
end
^


/* Trigger: DU_BI0 */
CREATE OR ALTER TRIGGER DU_BI0 FOR DU
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.Code = gen_id(du_gen,  1);
end
^


/* Trigger: EVENTS_BI */
CREATE OR ALTER TRIGGER EVENTS_BI FOR EVENTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.CODE IS NULL) THEN
    NEW.CODE = GEN_ID(EVENTS_GEN,1);
END
^


/* Trigger: HOUSE_BI0 */
CREATE OR ALTER TRIGGER HOUSE_BI0 FOR HOUSE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.Code = gen_id(House_gen, 1);
end
^


/* Trigger: HOUSE_BU0 */
CREATE OR ALTER TRIGGER HOUSE_BU0 FOR HOUSE
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  if (New.DU<>OLD.DU) then
  begin
    update Addr set DU=NEW.DU where House=NEW.Code;
    update AccCode set DU=NEW.DU where House=NEW.Code;
    update AccCodePrv set DU=NEW.DU where House=NEW.Code;
  end
end
^


/* Trigger: ISPOLNIT_BI0 */
CREATE OR ALTER TRIGGER ISPOLNIT_BI0 FOR ISPOLNIT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code is NULL) then
    NEW.Code = gen_id(ispolnit_gen, 1);
end
^


/* Trigger: KATEGORY_BI0 */
CREATE OR ALTER TRIGGER KATEGORY_BI0 FOR KATEGORY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.code is null) then new.code=gen_id(Kategory_gen,1);
end
^


/* Trigger: KONTRAGENT_BI0 */
CREATE OR ALTER TRIGGER KONTRAGENT_BI0 FOR KONTRAGENT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code IS NULL) then
    NEW.Code=gen_id(kontragent_gen, 0);
end
^


/* Trigger: MGROUP_BI0 */
CREATE OR ALTER TRIGGER MGROUP_BI0 FOR MGROUP
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.code IS NULL) then NEW.Code=gen_id(mgroup_gen,  1);
end
^


/* Trigger: MLIST_BI0 */
CREATE OR ALTER TRIGGER MLIST_BI0 FOR MLIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.CODE is null) then NEW.Code=gen_id(MList_GEN, 1);
end
^


/* Trigger: PIPLE_BI0 */
CREATE OR ALTER TRIGGER PIPLE_BI0 FOR PIPLE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.code is null) then
    new.code = gen_id(piple_gen, 1);
end
^


/* Trigger: PLANHOUSE_BI0 */
CREATE OR ALTER TRIGGER PLANHOUSE_BI0 FOR PLANHOUSE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.Code = Gen_id(planhouse_gen,  1);
end
^


/* Trigger: PLANREPORT_BI0 */
CREATE OR ALTER TRIGGER PLANREPORT_BI0 FOR PLANREPORT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code is null) then
    NEW.Code = GEN_ID(PlanReport_Gen,1);
end
^


/* Trigger: ROLES_BI0 */
CREATE OR ALTER TRIGGER ROLES_BI0 FOR ROLES
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code is NULL) then NEW.Code=Gen_id(Roles_gen,1);
end
^


/* Trigger: SHOWHOUSEPLAN_BI0 */
CREATE OR ALTER TRIGGER SHOWHOUSEPLAN_BI0 FOR SHOWHOUSEPLAN
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code IS NULL) then NEW.Code=Gen_id(showhouseplan_gen, 1);
end
^


/* Trigger: SHOWHOUSE_BI0 */
CREATE OR ALTER TRIGGER SHOWHOUSE_BI0 FOR SHOWHOUSE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.code IS NULL) then NEW.Code = Gen_id(showhouse_gen,  1);
end
^


/* Trigger: SHOWRESULT_BI0 */
CREATE OR ALTER TRIGGER SHOWRESULT_BI0 FOR SHOWRESULT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code IS NULL) then  NEW.Code = Gen_id(ShowResult_gen, 1);
end
^


/* Trigger: SHOWSTRUCT_BI0 */
CREATE OR ALTER TRIGGER SHOWSTRUCT_BI0 FOR SHOWSTRUCT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code is null) then
    NEW.code = gen_id(showstruct_gen, 1);
end
^


/* Trigger: SRVDOG_BI0 */
CREATE OR ALTER TRIGGER SRVDOG_BI0 FOR SRVDOG
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code is null) then
    NEW.code = Gen_id(SrvDog_gen,1);
end
^


/* Trigger: STREET_BI0 */
CREATE OR ALTER TRIGGER STREET_BI0 FOR STREET
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.code = Gen_id(street_gen,  1);
end
^


/* Trigger: STRUCTDEFECT_BI0 */
CREATE OR ALTER TRIGGER STRUCTDEFECT_BI0 FOR STRUCTDEFECT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.Code IS NULL) then NEW.Code = gen_id(StructDefect_gen, 1);
end
^


/* Trigger: WORKER_BI0 */
CREATE OR ALTER TRIGGER WORKER_BI0 FOR WORKER
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.code is null) then
    new.Code = gen_id(worker_gen, 1);
end
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE CALCHOUSERECVIZITS
AS
 declare variable House integer;
 declare variable Total_SQ numeric(15,2);
 declare variable Living_SQ numeric(15,2);
 declare variable Lodger_CNT smallint;
 declare variable Flat_CNT smallint;
 declare variable AccCode_CNT smallint;
begin
  --просматриваем список домов БД
  for select Code from House
  into :House do
  begin
    --реквизиты по квартирно
    select Count(*), Sum(Total_SQ), Sum(Living_SQ), Sum(Lodger_CNT)
    from Addr where House=:House
    into :Flat_CNT, :Total_SQ, :Living_SQ, :Lodger_CNT;
    --получаем число активных лицевых счетов
    select Count(*) from AccCode where House=:House and Date_Close<>'30.12.1899'
    into :AccCode_CNT;
    --обновляем информацию
    update House set Total_SQ=:Total_SQ, Living_SQ=:Living_SQ,
      Lodger_CNT=:Lodger_CNT, Flat_CNT=:Flat_CNT, AccCode_CNT=:AccCode_CNT
    where Code=:House;
  end

end^


CREATE OR ALTER PROCEDURE GETPERIODSALDO (
    D1 DATE,
    D2 DATE,
    ACCODE VARCHAR(32))
RETURNS (
    REC_TYPE SMALLINT,
    DATE_VAL DATE,
    PRV_NAME VARCHAR(32),
    SALDO NUMERIC(18,2),
    ACCCODE VARCHAR(32),
    SRV VARCHAR(32),
    PAY_DATE DATE,
    ACC_DATE DATE,
    HOUSE INTEGER,
    DU INTEGER,
    PSUM NUMERIC(18,2),
    RSUM NUMERIC(18,2),
    OSUM NUMERIC(18,2))
AS
declare variable SUMMA numeric(18,2);
BEGIN

   for SELECT ap.REC_TYPE,ap.ACCCODE,
           ap.SRV,
           ap.DATE_VAL,ap.PAY_DATE,
           ap.ACC_DATE,ap.SUMMA,ap.HOUSE,
           ap.DU
    FROM ACCCODEPRV ap
    where ap.acccode=:AcCode and ap.date_val between :d1 and :d2
    PLAN SORT (ap INDEX (ACCCODEPRV_IDX3))
    order by ap.date_val, ap.rec_type
    into :rec_type,:acccode,:srv,:date_val,:pay_date,:acc_date,:summa,:house,:du do
    begin
     execute procedure GetPrvTypeName(:rec_type) returning_values(:Prv_Name);
         PSum=0; RSum=0;OSum=0;
         if (rec_type=1) then RSum=-Summa;
         if (rec_type=0) then PSum=Summa;
         if (rec_type>1) then OSum=Summa;
         Saldo=Saldo+PSum-RSum+osum;
         if (RSum=0) then RSum=null;
         if (PSum=0) then PSum=null;
         if (OSum=0) then OSum=null;
         if (Saldo=0) then Saldo=null;
     SUSPEND;
    end

END^


CREATE OR ALTER PROCEDURE GETPRVTYPENAME (
    PRV_TYPE SMALLINT)
RETURNS (
    PRV_NAME VARCHAR(32))
AS
begin
 if (Prv_Type=0) then Prv_Name='НАЧИСЛЕНИЕ';
 else if (Prv_Type=1) then Prv_Name='ОПЛАТА';
 else if (Prv_Type=2) then Prv_Name='КОРРЕКЦИЯ';
 else if (Prv_Type=3) then Prv_Name='ПЕРЕРАСЧЕТ';
 else if (Prv_Type=4) then Prv_Name='СУБСИДИЯ';
 else Prv_Name='НЕИЗВЕСТНО';
end^


CREATE OR ALTER PROCEDURE GETRIGHTLIST
RETURNS (
    CODE INTEGER,
    NAME VARCHAR(256))
AS
begin
  Code=1; Name='Справочник домов'; SUSPEND;
  Code=2; Name='Справочник контрагентов'; SUSPEND;
  Code=3; Name='Справочник физических лиц'; SUSPEND;
  Code=4; Name='Справочник сотрудников'; SUSPEND;
end^


CREATE OR ALTER PROCEDURE GETSALDO (
    D1 DATE,
    ACCCODE VARCHAR(32))
RETURNS (
    SRV VARCHAR(32),
    SUMMA NUMERIC(18,2))
AS
declare variable OP_DATE date;
BEGIN
  --получаем дату расчета сальдо
  OP_Date=NULL;
  select Max(OP_Date) from AccCodeSaldo
  where AccCode=:AccCode and OP_Date<=:D1
  into :OP_Date;
  -- возвращаем записи сальдо
  if (not OP_Date IS NULL) then
  begin
    for select Srv, Saldo from AccCodeSaldo
        where AccCode=:AccCode and OP_Date=:OP_Date
        into :Srv, :Summa
        do Suspend;
    -- возвращаем проводки ДО начальной даты формирования отчета
    for select Srv, Summa from AccCodePrv
        where AccCode=:AccCode and Date_Val between :OP_Date and :D1-1
        into :Srv, :Summa
        do suspend;
  end
END^



SET TERM ; ^
